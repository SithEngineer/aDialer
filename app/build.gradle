apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

// Required as JUnit 5 doesn't support android modules out of the box.
apply plugin: "de.mannodermaus.android-junit5"

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "io.github.sithengineer.dialer"
    minSdkVersion 17
    targetSdkVersion 28
    versionCode 1
    versionName "0.1"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
  }

  /*
  signingConfigs {
    config {
      keyAlias dialerAppProperties['keyStoreAlias']
      keyPassword dialerAppProperties['keyStorePassword']
      storeFile file(dialerAppProperties['keyStoreFile'])
      storePassword dialerAppProperties['keyStorePassword']
    }
  }
  */

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude "META-INF/LICENSE.md"
    exclude "META-INF/LICENSE-notice.md"
  }

  kapt {
    generateStubs = true
  }

  buildTypes {
    debug {
      minifyEnabled false
      useProguard false
    }

    release {
      minifyEnabled true
      useProguard true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  // Add Kotlin source directory to all source sets
  sourceSets.each {
    it.java.srcDirs += "src/$it.name/kotlin"
  }

  testOptions {
    junitPlatform {
      filters {
        engines {
          include 'spek2'
        }
      }
      jacocoOptions {
        // here goes all jacoco config, for example
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
        unitTests.all {
          testLogging.events = ["passed", "skipped", "failed"]
        }
      }
    }
  }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

  implementation fileTree(dir: "libs", include: ["*.jar"])

  // Google android dependencies
  implementation "com.android.support:support-v4:28.0.0"
  implementation "com.android.support:appcompat-v7:28.0.0"
  implementation "com.android.support:cardview-v7:28.0.0"
  implementation "com.android.support:recyclerview-v7:28.0.0"
  implementation "com.android.support:palette-v7:28.0.0"
  implementation "com.android.support:design:28.0.0"
  implementation "com.android.support.constraint:constraint-layout:1.1.3"

  // logs
  implementation "com.jakewharton.timber:timber:4.7.1"

  // reactive extensions
  implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
  implementation "io.reactivex.rxjava2:rxjava:2.2.4"
  implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"
  implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0"
  implementation "com.jakewharton.rxbinding2:rxbinding-design-kotlin:2.2.0"
  implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:2.2.0"
  implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:2.2.0"
  implementation "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:2.2.0"

  // image loading
  implementation("com.github.bumptech.glide:glide:4.5.0") {
    exclude group: "com.android.support"
  }
  kapt "com.github.bumptech.glide:compiler:4.5.0"

  // view injection
  implementation "com.jakewharton:butterknife:8.5.1"
  kapt "com.jakewharton:butterknife-compiler:8.5.1"

  // dependency injection
  implementation "com.google.dagger:dagger:2.22.1"
  kapt "com.google.dagger:dagger-compiler:2.22.1"
  kapt "com.google.dagger:dagger-android-processor:2.22.1"
  implementation "com.google.dagger:dagger-android-support:2.22.1"

  // Room
  implementation "android.arch.persistence.room:runtime:1.1.1"
  implementation "android.arch.persistence.room:rxjava2:1.1.1"
  kapt "android.arch.persistence.room:compiler:1.1.1"
  testImplementation "android.arch.persistence.room:testing:1.1.1"

  // libphonenumber
  implementation'io.michaelrocks:libphonenumber-android:8.8.5'

  // (Required) Writing and executing Unit Tests on the JUnit Platform
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.0"

  // assertion
  testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

  // spek2
  testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
  testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek_version"
  testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

  // Jupiter API & Platform runner
  androidTestImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0"
  androidTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.0"
  androidTestRuntimeOnly "org.junit.platform:junit-platform-runner:1.4.0"

  // Instrumentation test companion libraries
  androidTestImplementation "de.mannodermaus.junit5:android-instrumentation-test:$junit5_runner"
  androidTestRuntimeOnly "de.mannodermaus.junit5:android-instrumentation-test-runner:$junit5_runner"
}

kotlin {
  experimental {
    coroutines "enable"
  }
}


